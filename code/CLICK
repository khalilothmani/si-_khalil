#include <WiFi.h>
#include <WebServer.h>


const char* ssid = "ssid";
const char* password = "pass";

WebServer server(80);  

const int ledPin =4;

const char* html = "<!DOCTYPE html>\
                    <html>\
                    <head>\
                        <meta name='viewport' content='width=device-width, initial-scale=1.0'>\
                        <title>si khalil</title>\
                        <style>\
                            body { font-family: Arial, Helvetica, sans-serif;background-color: #000000; }\
                            h1 { text-align: center; background-color: #6a0af1 }\
                            .button1 { display: block; margin: 0 auto; padding: 10px; width: 100px; background-color:  #008000; border: none; color: white; font-size: 16px; }\
                            .button2{ display: block; margin: 0 auto; padding: 10px; width: 100px; background-color:  #FF0000; border: none; color: white; font-size: 16px; }\
                            p{ color: white;}\
                        </style>\
                    </head>\
                    <body>\
                        <h1>Si khalil Mnwarha alina</h1>\
                        <div>\
                            <button class='button1' onclick='turnOn()'>Turn On</button>\
                             <br>\
                            <button class='button2' onclick='turnOff()'>Turn Off</button>\
                            \
                        </div>\
                        <P>\This code sets up a web server on port 80 using the ESP32 board and the WiFi library. It defines the WiFi network credentials and creates an instance of the WebServer class. The code sets the LED pin as an output and defines HTML code to be displayed on the web page.The HTML code consists of a header with a title and some CSS styling, a body with a title and two buttons, and a JavaScript function to handle button clicks. The two buttons are used to turn the LED on and off by sending HTTP GET requests to the server.In the setup function, the code connects to the Wi-Fi network, handles the root URL by sending the HTML code, and handles the /on and /off URLs by turning the LED on and off, respectively. It also starts the server.In the loop function, the code continuously listens for incoming client requests and handles them accordingly. This code can be used to control an LED over the internet using a web page.</p>\
                          <br>\
                          <script>\
                            function turnOn() {\
                                fetch('/on');\
                            }\
                            function turnOff() {\
                                fetch('/off');\
                            }\
                        </script>\
                    </body>\
                    </html>";



void setup() {

  pinMode(ledPin, OUTPUT);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }


  Serial.begin(115200);
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  server.on("/", []() {
    server.send(200, "text/html", html);
  });

  server.on("/on", []() {
    digitalWrite(ledPin, HIGH);
    server.send(200, "text/plain", "LED turned on.");
  });


  server.on("/off", []() {
    digitalWrite(ledPin, LOW);
    server.send(200, "text/plain", "LED turned off.");
  });


  server.begin();
}

void loop() {

  server.handleClient();
}
